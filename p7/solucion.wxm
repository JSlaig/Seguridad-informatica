/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: comment start ]
PRÁCTICA 07  (Curso 2022-2023)
CLAVE PRIVADA: CIFRADO POR BLOQUES (semana del 17 de abril de 2023)


Compilado con la versión wxMaxima 22.04.0.
Fichero de instalación: maxima-5.46.0-win64.exe.
Última modificación: 14 de abril de 2022.

   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
CODIFICACIÓN NUMÉRICA
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
codi_numerica(alf,msg)
Función que realiza la codificación numérica al argumento msg, identificando cada símbolo del alfabeto alf con su posición en el alfabeto menos uno.

Primer argumento: un string con el alfabeto.
Segundo argumento: puede ser un string con el mensaje o una lista con la codificación numérica del mensaje.

Si msg es un string, devuelve una lista con la codificación numérica del mensaje. Si msg es una lista, devuelve un string del mensaje con codificación numérica los datos de la lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_numerica(alf,msg):=block(
    [sol],
    if stringp(msg) then sol:makelist( sposition(charat(msg,i),alf)-1 ,i,1,slength(msg))
        else 
        (
        sol:"",
        for i in msg do sol:concat(sol,charat(alf,i+1))
        ),
    sol
    )$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
PADDING
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
convert_base(n,b) 
Función para obtener la expresión en base b del número natural n (sistema de numeración en base b). La función tiene dos argumentos.

Primer argumento: el número natural n.
Segundo argumento: la base b.

Devuelve una lista con los dígitos de la expresión de n en base b.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
convert_base(n,b):=block(
[result:[],l],
    while n>=b do 
        (
        l:divide(n,b),
        push(l[2],result),
        n:l[1] 
        ),
    push(n,result),
    result
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
padding(msg_num,long_block,module) 
Función que rellena el mensaje numérico a cifrar, hasta conseguir que su longitud sea múltiplo de la longitud del block. Para ello, se rellena el último block con números aleatorios en Z_module y se añade un último block con la expresión (en base=module) de la longitud del mensaje numérico (completada con ceros a la izquierda hasta longitud del block).

Primer argumento: una lista con el mensaje numérico.
Segundo argumento: la longitud del block.
Tercer argumento: el módulo que se usa en la codificación numérica.

Devuelve la lista con el mensaje numérico preparado para cifrar.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
padding(msg_num,long_block,module):=block(
[salida,long,relleno,ultimo],
salida:msg_num,
long:length(msg_num),
relleno:long_block-mod(long,long_block),
    for i thru relleno do salida:endcons(random(module),salida),
ultimo:convert_base(long,module),
    while length(ultimo)<long_block do push(0,ultimo),
append(salida,ultimo)
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
FUNCIÓN DE CIFRADO DE HILL (mensaje numérico)
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
hill(msg_num,clave,module)
Función que aplica la función del cifrado de Hill a un mensaje numérico con longitud múltiplo del tamaño del block.

Primer argumento: una lista con el mensaje numérico.
Segundo argumento: una matriz con la clave de Hill.
Tercer argumento: el módulo que se usa en la codificación numérica.

Devuelve la lista con el mensaje numérico cifrado.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
hill(msg_num,clave,module):=block(
[long,k,r,msg_num_cif,block_cif],
long:length(msg_num),
k:length(clave), /* en k almacenamos la longitud del block */
msg_num_cif:[],
    for i:1 thru long step k do
        (
        block_cif:list_matrix_entries( mod( makelist(msg_num[j],j,i,i+k-1) .clave , module) ),
        msg_num_cif:append(msg_num_cif,block_cif)
        ),
msg_num_cif
) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
DATOS DE LA PRÁCTICA
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
batchload("entrada_datos_07.txt") $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sprint(alf)$
module:slength(alf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
DATOS DEL PROBLEMA 1
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
clave_cif:clave_cif_1$
C:clave_cif;
long_block:length(clave_cif);
gcd(determinant(clave_cif),module);
sprint(texto_cifrado_1);
texto_lista:codi_numerica(alf,texto_cifrado_1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
modulus:module;
inversaC: invert(rat(C));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
mod(%,module);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
depadding(msg_num, k, module):=block(
[salida, long, length, long_del, exp],
salida:[],
long:length(msg_num),
    /*sprint(long),*/
length:long-k+1,
exp:0,
long_del:0,
for j:long thru length step -1 do
    (
        long_del:long_del+(msg_num[j]*module^exp),
        exp:exp+1
    ),
for i thru long_del do
    (
        salida:endcons(msg_num[i], salida)
    ),
salida
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
hill(texto_lista,inversaC,module);
/*texto_descifrado:codi_numerica(alf,%);*/
depadding(%, long_block ,module)$
texto_descifrado:codi_numerica(alf,%)$
sprint(%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
DATOS DEL PROBLEMA 2
NOTA: LOS DOS DATOS DE LA CLAVE ESTÁN EN FORMATO MATRIZ
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
clave_cif:clave_cif_2$
C:clave_cif;
long_block:length(clave_cif[1]);
gcd(determinant(clave_cif[1]),module);
sprint(texto_cifrado_2)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
msg_num:codi_numerica(alf,texto_cifrado_2);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
module:slength(alf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
modulus:module$
inversa:rat(invert(clave_cif[1]));
x:clave_cif[2];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
mod(-x,module);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
segundo:-x.inversa;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
clave_decif:[mod(inversa,module),mod(segundo,module)];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
afin(msg_num, clave, module):=block(
[long,k,r,msg_num_cif,block_cif],
long:length(msg_num),
k:length(clave[1]), /* en k almacenamos la longitud del block */
msg_num_decif:[],
    for i:1 thru long step k do
        (
        block_decif:list_matrix_entries( mod( makelist(msg_num[j],j,i,i+k-1).clave[1]+clave[2] , module) ),
        msg_num_decif:append(msg_num_decif,block_decif)
        ),
msg_num_decif
) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fin:afin(msg_num,clave_decif,module);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Fcodi_numerica(alf,fin);
sprint(%);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
