/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 21.05.2 ] */
/* [wxMaxima: comment start ]
PRÁCTICA 08  (Curso 2022-2023)
SISTEMA CRIPTOGRÁFICO MIXTO: VIGENÈRE Y RSA (semana del 8 de mayo de 2023)


Compilado con la versión wxMaxima 22.04.0.
Fichero de instalación: maxima-5.46.0-win64.exe.
Última modificación: 14 de abril de 2022.

   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
CODIFICACIÓN NUMÉRICA
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
codi_numerica(alf,msj)
Función que realiza la codificación numérica al argumento msj, identificando cada símbolo del alfabeto alf con su posición en el alfabeto menos uno.

Primer argumento: un string con el alfabeto.
Segundo argumento: puede ser un string con el mensaje o una lista con la codificación numérica del mensaje.

Si msj es un string, devuelve una lista con la codificación numérica del mensaje. Si msj es una lista, devuelve un string del mensaje con codificación numérica los datos de la lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_numerica(alf,msj):=block(
    [sol],
    if stringp(msj) then sol:makelist( sposition(charat(msj,i),alf)-1 ,i,1,slength(msj))
        else 
        (
        sol:"",
        for i in msj do sol:concat(sol,charat(alf,i+1))
        ),
    sol
    )$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
PADDING
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
convert_base(n,b) 
Función para obtener la expresión en base b del número natural n (sistema de numeración en base b). La función tiene dos argumentos.

Primer argumento: el número natural n.
Segundo argumento: la base b.

Devuelve una lista con los dígitos de la expresión de n en base b.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
convert_base(n,b):=block(
[result:[],l],
    while n>=b do 
        (
        l:divide(n,b),
        push(l[2],result),
        n:l[1] 
        ),
    push(n,result),
    result
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
padding(msj_num,long_bloque,modulo) 
Función que rellena el mensaje numérico a cifrar, hasta conseguir que su longitud sea múltiplo de la longitud del bloque. Para ello, se rellena el último bloque con números aleatorios en Z_modulo y se añade un último bloque con la expresión (en base=módulo) de la longitud del mensaje numérico (completada con ceros a la izquierda hasta longitud del bloque).

Primer argumento: una lista con el mensaje numérico.
Segundo argumento: la longitud del bloque.
Tercer argumento: el módulo que se usa en la codificación numérica.

Devuelve la lista con el mensaje numérico preparado para cifrar.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
padding(msj_num,long_bloque,modulo):=block(
[salida,long,relleno,ultimo],
salida:msj_num,
long:length(msj_num),
relleno:long_bloque-mod(long,long_bloque),
    for i thru relleno do salida:endcons(random(modulo),salida),
ultimo:convert_base(long,modulo),
    while length(ultimo)<long_bloque do push(0,ultimo),
append(salida,ultimo)
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
RSA por bloques
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
RSA_bloques_cif(msj,n,e,N)                      - Cifrado RSA por bloques -

msj: lista con el mensaje numérico a cifrar
(n,e): clave pública del usuario receptor
N: número de símbolos del alfabeto

Devuelve el mensaje numérico cifrado usando RSA por bloques.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
RSA_bloques_cif(msj,n,e,N):=block(
[k,long,msj_num_cif,bloque,m,c,extra,ceros],
k:floor(log(n)/log(N)),
long:length(msj),
msj_num_cif:[],
for i:1 thru long step k do
        (
        bloque:makelist(msj[j],j,i,i+k-1),
        m:sum(bloque[j]*N^(k-j),j,1,k),
        c:power_mod(m,e,n),
        extra:convert_base(c,N),
        ceros:k+1-length(extra),
        if ceros # 0 then for j:1 thru ceros do push(0,extra),
        msj_num_cif:append(msj_num_cif,extra)
        ),
msj_num_cif    
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
VIGENÈRE
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
vigenere(alf,msj,clave)                      - Cifrado Vigenère clásico -
alf: string del alfabeto
msj: string del mensaje a cifrar
clave: string con la clave del cifrado de Vigenère clásico

Devuelve el string del mensaje cifrado usando Vigenère.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
vigenere(alf,msj,clave):=block(
[modulo,msj_num,clave_num,s,msj_num_cif],
modulo:slength(alf),
msj_num:codi_numerica(alf,msj),
clave_num:codi_numerica(alf,clave),
s:length(clave_num),
msj_num_cif:makelist( mod(msj_num[i+1] + clave_num[mod(i,s)+1], modulo), i,0,length(msj_num)-1),
codi_numerica(alf,msj_num_cif)
)
$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
DATOS DE LA PRÁCTICA
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
batchload("entrada_datos_08_G2.txt") $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
ALFABETO
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
sprint(alf) $
N:slength(alf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
PROBLEMA 1
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
sprint(texto_cifrado_1)$
sprint(clave)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
PROBLEMA 2
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
[n_B,e_B];
[n_P,e_P];
[n_J,e_J];
[n_M,e_M];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sprint(texto_cifrado_2)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
PROBLEMA 3 
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
sprint(par_cifrado)$
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 21.05.2"$
