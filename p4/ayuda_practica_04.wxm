/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 21.05.2 ] */
/* [wxMaxima: comment start ]
PRÁCTICA 04  (Curso 2022-2023)
SIMULACIÓN DE UNA CODIFICACIÓN LINEAL SIN RUIDO  (semana del 20 de marzo de 2023)

FICHERO DE AYUDA DE LA PRÁCTICA

Compilado con la versión wxMaxima 22.04.0.
Fichero de instalación: maxima-5.46.0-win64.exe.
Última modificación: 14 de abril de 2022.

   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
EJEMPLO DE LA SIMULACIÓN (indicado en la práctica)
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
CODIFICACIÓN DE LA FUENTE
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
alf:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZ abcdefghiíjklmnñopqrstuvwxyz"$
slength(%);
p:5;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
float(log(56)/log(p));
ceiling(log(56)/log(p));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
EXPRESIÓN EN BASE p
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
convert_base(n,b) 
Función para obtener la expresión en base b del número natural n (sistema de numeración en base b). La función tiene dos argumentos.

Primer argumento: el número natural n.
Segundo argumento: la base b.

Devuelve una lista con los dígitos de la expresión de n en base b.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
convert_base(n,b):=block(
[result:[],l],
    while n>=b do 
        (
        l:divide(n,b),
        push(l[2],result),
        n:l[1] 
        ),
    push(n,result),
    result
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
convert_base(8,2);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
convert_base(11,5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Codificación de la fuente aplicada al mensaje "Las".
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
sposition("L",alf)-1;
cod1:convert_base(%,5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
push(0,cod1);
cod1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sposition("a",alf)-1;
cod2:convert_base(%,5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sposition("s",alf)-1;
cod3:convert_base(%,5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
append(cod1,cod2,cod3);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
codi_fuente(alf,msj,p) 
Función para hacer el proceso de codificación de la fuente de la Práctica 04. La función tiene tres argumentos:

Primer argumento: es el alfabeto en formato string.
Segundo argumento: es el mensaje a codificar en formato string.
Tercer argumento: es un número primo p, que marca la base que se usa en las expresiones de los números enteros.

La función devuelve la lista que se obtiene al aplicar la primera codificación descrita en la Práctica 04 al mensaje msj.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_fuente(alf,msj,p):=block(
    [N,min_long,result:[],aux,ceros],
    N:slength(alf),
    min_long:ceiling(log(N)/log(p)),
    for i:1 thru slength(msj) do
        (
        aux:convert_base(sposition(charat(msj,i),alf)-1,p),
        ceros:min_long-length(aux),
        if ceros # 0 then for j:1 thru ceros do push(0,aux),
        result:append(result,aux)
        ),
    result
    )$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
codi_fuente(alf,"Las",5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
codi_1:%;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
CODIFICACIÓN LINEAL
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
A:matrix([1,2],[3,4]);
codi_1;
k:length(A);
G:mat_unblocker(matrix([ident(k),A]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
¿Cómo trocear la lista codi_1 para luego realizar el producto por G?
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Versión 1 (tipo de dato array)
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
array(b,2);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
b[0]:[1,2,3] $
b[1]:5 $
b[2]:[0,2]$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
listarray(b);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
En nuestro ejemplo:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_1;
k;
long:length(codi_1) $   
resto:mod(long,k) $
array(a,(long-resto)/k-1) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
cont:0$
for i thru long-resto-1 step k do
    (
        a[cont]: makelist(codi_1[j],j,i,i+k-1),
        cont:cont+1 /* en cont queda almacenado el número de pasadas por el bucle*/
    );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
listarray(a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
flatten(%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Versión 2: lista de listas con makelist.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_1;
k;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
makelist( makelist(codi_1[j],j,i,i+k-1) ,i,1,long-resto-1,k);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
MULTIPLICACIÓN POR G
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_1;
k;
long:length(codi_1) $   
resto:mod(long,k) $
array(a,(long-resto)/k-1) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
cont:0$
for i thru long-resto-1 step k do
    (
        a[cont]: list_matrix_entries(mod( makelist(codi_1[j],j,i,i+k-1).G ,p)),
        cont:cont+1 /* en cont queda almacenado el número de pasadas por el bucle*/
    );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
listarray(a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
flatten(%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
codi_lineal(A,lista,p) 
Función para hacer el proceso de codificación lineal de la Práctica 04. La función tiene tres argumentos:

Primer argumento: es la matriz A, siendo G=(I_k|A) la matriz generadora.
Segundo argumento: es la lista a codificar.
Tercer argumento: es un número primo p, que marca el cardinal del cuerpo finito.

La función devuelve la lista que se obtiene al aplicar la codificación lineal descrita en la Práctica 04 a lista.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
codi_lineal(A,lista,p):=block(                               /*G=(I_k|A)*/
[k,G,long, resto,result,cont],    
k:length(A),
G:mat_unblocker(matrix([ident(k),A])),
long:length(lista),   
resto:mod(long,k),
array(result,(long-resto)/k-1),
cont:0,
for i thru long-resto-1 step k do
    (
        result[cont]: list_matrix_entries(mod(makelist(lista[j],j,i,i+k-1).G,p)),
        cont:cont+1 /* en cont queda almacenado el número de pasadas por el bucle*/
    ),
result:listarray(result),
if resto#long then result:append(result, makelist(lista[i],i,cont*k+1,long)),
flatten(result)
) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
p:5 $
msj:"Las"$
c1:codi_fuente(alf,msj,p);
c2:codi_lineal(A,c1,p);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 21.05.2"$
